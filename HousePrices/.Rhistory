hclustering <- hclust(mdist)
myplotclust
str(myplotclust)
str(mypltclust)
str(myptclust)
str(myplclust)
myplclust
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(mdist,lab.col=unclass(sub1$activity))
myplclust(hclustering,lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562:563)]))
dim(svd1$u)
?rbinom
rbinom(10,1,prob=0.5)
rbinom(10,2,prob=0.5)
rbinom(10,3,prob=0.5)
rbinom(10,0,prob=0.5)
rbinom(10,4,prob=0.5)
rbinom(10,4,prob=0.5)
?reformulate
getwd()
list()
ls()
rm(list = ls())
getwd()
libarary(datasets)
library(datasets)
head(cars)
head(cars, n=10)
head(airquality)
summary(airquality)
install.packages("data.table")
data(mtcars)
head(mtcars)
plot(mtcars$mpg,mtcars$wt)
plot(x=mtcars$wt, y=mtcars$mpg)
meanWeight <- mean(mtcars$wt)
?abline
abline(h=meanWeight)
abline(v=meanWeight)
fit <- lm(mtcars$mpg~mtcars$wt)
abline(fit)
summary(fit)
summary(mtcars)
summary(fit)
?predict
predict(fit,meanWeight)
new <- data.frame(x = meanWeight)
new
predict(fit,new)
predict(fit,new,se.fit = TRUE)
fit$coefficients
fit$coefficients[1]
fit$coefficients[2] # slope or beta1
fit$coefficients[1] + fit$coefficients[2]*meanWeight
fit$coefficients[2] # slope or beta1
fit
summary(fit)
fit$coefficients
summary(fit)$coefficients
sumCoeff[2,1] + c(1,-1) + qt(0.975, fit$df) * sumCoeff[2,2]
sumCoeff <- summary(fit)$coefficients
sumCoeff[2,1] + c(1,-1) + qt(0.975, fit$df) * sumCoeff[2,2]
sumCoeff[2,1] + c(1,-1) * qt(0.975, fit$df) * sumCoeff[2,2]
fit$coefficients[1] + fit$coefficients[2]*meanWeight
sumCoeff[1,1] + c(1,-1) * qt(0.975, fit$df) * sumCoeff[1,2]
(fit$coefficients[1] + fit$coefficients[2]*meanWeight) + c(1,-1) * qt(0.975, fit$df) * sumCoeff[1,2]
(fit$coefficients[1] + fit$coefficients[2]*meanWeight) + c(1,-1) * qt(0.975, fit$df) * sumCoeff[2,2]
fit2 <- lm(mtcars$mpg ~ I(mtcars$wt - mean(mtcars$wt)))
plot(x=(mtcars$wt - mean(mtcars$wt)), y=mtcars$mpg)
summary(fit2)
abline(v=0)
abline(fit2)
(fit$coefficients[1] + fit$coefficients[2]*meanWeight) + c(1,-1) * qt(0.975, fit$df) * sumCoeff[1,2]
sumCoeff2 <- summary(fit2)$coefficients
sumCoeff2
(fit2$coefficients[1] + fit2$coefficients[2]*meanWeight) + c(1,-1) * qt(0.975, fit2$df) * sumCoeff2[1,2]
sumCoeef2[1,1] + c(1,-1) * qt(0.975, fit2$df) * sumCoeff2[1,2]
sumCoeff2[1,1] + c(1,-1) * qt(0.975, fit2$df) * sumCoeff2[1,2]
fit <- lm(mtcars$mpg~mtcars$wt-1)
plot(x=mtcars$wt, y=mtcars$mpg)
abline(fit)
head(mtcars)
fit <- lm(mtcars$mpg ~ I(mtcars$wt - 3))
plot(x=(mtcars$wt - 3), y=mtcars$mpg)
abline(v=0)
abline(fit)
summary(fit)
sumCoeff <- summary(fit)$coefficients
sumCoeff[1,1] + c(1,-1) * qt(0.975, fit$df) * sumCoeff[1,2]
?mtcars
fit <- lm(mtcars$mpg ~ I(mtcars$wt - 3))
summary(fit)
sumCoeff <- summary(fit)$coefficients
sumCoeff[1,1] + c(1,-1) * qt(0.975, fit$df) * sumCoeff[1,2]
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
newx
data.frame(predict(fit, newdata= newx,interval = ("confidence")))
fit <- lm(mtcars$mpg~mtcars$wt)
summary(fit)
new <- data.frame(x = meanWeight)
predict(fit, new, se.fit = TRUE)
?predict
new <- data.frame(x = meanWeight)
predict(fit, new, interval = ("prediction"))
predict(fit, new, interval = ("confidence"))
predict(fit, newdata=meanWeight, interval = ("confidence"))
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x);
summary(fit)$coefficients
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
data.frame(predict(fit, newdata= newx,interval = ("confidence")))
fit <- lm(mtcars$mpg~mtcars$wt)
summary(fit)
new <- data.frame(x = meanWeight)
new
predict(fit, newdata=meanWeight, interval = ("confidence"))
predict(fit, newdata=new, interval = ("confidence"))
predict(fit, newdata=new, interval = ("prediction"))
nrow(mtcars)
predict(fit, interval = ("confidence"))
predict(fit, newdata=new, interval = ("prediction"))
data.frame(predict(fit, newdata = newx,interval = ("prediction")))
fit <- lm(y ~ x);
newx = data.frame(x = seq(min(x), max(x), length = 100))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
data.frame(predict(fit, newdata = newx,interval = ("prediction")))
y <- mtcars$mpg
x <- mtcars$wt
y <- mtcars$mpg
x <- mtcars$wt
fit <- lm(y ~ x)
# abline(fit)
# summary(fit)
new <- data.frame(x = meanWeight)
predict(fit, newdata=new, interval = ("confidence"))
predict(fit, newdata=new, interval = ("confidence"))
predict(fit, newdata=new, interval = ("prediction"))
new <- data.frame(x = c(meanWeight,3))
new
predict(fit, newdata=new, interval = ("confidence"))
predict(fit, newdata=new, interval = ("prediction"))
y <- mtcars$mpg
x <- mtcars$wt
fit <- lm(y ~ I(x/2))
summary(fit)$coeffient
summary(fit)$coefficient
fit0 <- lm(y ~ x)
fit1 <- lm(y ~ I(x/2))
summary(fit0)$coefficient
summary(fit1)$coefficient
fit1$df
coefficients[2,1] + c(1,-1) * qt(0.975, fit1$df) + coefficients[2,2]
coefficients <- summary(fit1)$coefficient
coefficients[2,1] + c(1,-1) * qt(0.975, fit1$df) + coefficients[2,2]
coefficients <- summary(fit1)$coefficient
summary(fit1)$coefficient
fit1 <- lm(y ~ I(x/2))
coefficients <- summary(fit1)$coefficient
coefficients[2,1] + c(1,-1) * qt(0.975, fit1$df) + coefficients[2,2]
fit1 <- lm(y ~ I(x * 2))
coefficients <- summary(fit1)$coefficient
coefficients[2,1] + c(1,-1) * qt(0.975, fit1$df) + coefficients[2,2]
fit1 <- lm(y ~ I(x / 2))
coefficients <- summary(fit1)$coefficient
coefficients[2,1] + c(1,-1) * qt(0.975, fit1$df) + coefficients[2,2]
fit0 <- lm(y ~ x)
summary(fit0)$coefficient
coefficients <- summary(fit0)$coefficient
coefficients[2,1] + c(1,-1) * qt(0.975, fit1$df) + coefficients[2,2]
fit1 <- lm(y ~ I(x / 2))
coefficients <- summary(fit1)$coefficient
coefficients[2,1] + c(1,-1) * qt(0.975, fit1$df) + coefficients[2,2]
fit0$residuals
sum(fit0$residuals)
?confint
y <- mtcars$mpg
x <- mtcars$wt
fit <- lm(mpg ~ I(wt * 0.5), data = mtcars)
fit1 <- lm(y ~ I(x / 2))
summary(fit1)$coefficient
summary(fit)$coefficient
confint(fit)[2, ]
x <- c(0.61,0.93,0.83,0.35,0.54,0.16,0.91,0.62,0.62)
y <- c(0.67,0.84,0.6,0.18,0.85,0.47,1.1,0.65,0.36)
fit <- lm(y ~ x)
summary(fit)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
plot(fit)
plot(predict(fit),e)
abline(v=0)
abline(h=0)
?mtcars
data(mtcars)
CarVariables <- mtcars[,c(1,2,3,4,6,9,10,11)]
head(CarVariables)
fit <- lm(mpg ~ ., data=CarVariables)
library(car)
install.packages("car")
library(car)
vif(fit)
fit2 <- lm(mpg ~ disp + hp + wt + am + gear + carb, data=CarVariables)
vif(fit2)
data(mtcars)
CarVariables <- mtcars[,c(1,2,3,4,6,9,10,11)]
with(CarVariables, plot(x=disp, y=mpg)
)
with(CarVariables, plot(x=cyl, y=mpg))
with(CarVariables, plot(x=hp, y=mpg))
with(CarVariables, plot(x=wt, y=mpg))
with(CarVariables, plot(x=am, y=mpg))
with(CarVariables, plot(x=disp, y=mpg))
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point()
print(g)
library(ggplot2)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point()
print(g)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point(aes(color=cyl), size=4, alpha=0.5)
print(g)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point(aes(color=factor(cyl), size=4, alpha=0.5)
print(g)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point(aes(color=factor(cyl)), size=4, alpha=0.5)
print(g)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point(aes(color=factor(cyl)), size=4, alpha=0.5)
g <- g + geom_smooth(method=lm)
print(g)
fit <- lm(mpg~disp,data=CarVariables)
predict(fit)
resid(fit)
fit <- lm(mpg~disp,data=CarVariables)
y <- predict(fit)
x <- resid(fit)
g <- ggplot(aes(x,y))
print(g)
?data.frame
residData <- data.frame(x=resid(fit), y = predict(fit))
residData
g <- ggplot(CarVariables, aes(x,y))
print(g)
g <- ggplot(CarVariables, aes(x,y)) + geom_point()
print(g)
residData <- data.frame( x = predict(fit), y=resid(fit))
g <- ggplot(CarVariables, aes(x,y)) + geom_point()
print(g)
residData <- data.frame( x = predict(fit), y=resid(fit))
g <- ggplot(CarVariables, aes(x=x,y=y)) + geom_point()
print(g)
residData <- data.frame( x = predict(fit), y=resid(fit))
g <- ggplot(residData, aes(x=x,y=y)) + geom_point()
print(g)
residData <- data.frame( x = predict(fit), y=resid(fit))
g <- ggplot(residData, aes(x=x,y=y)) + geom_point() + geom_hline(0)
print(g)
residData <- data.frame( x = predict(fit), y=resid(fit))
g <- ggplot(residData, aes(x=x,y=y)) + geom_point() + geom_hline(yintercept = 0)
print(g)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point(aes(color=factor(cyl)), size=4, alpha=0.5)
g <- g + geom_smooth(method=lm)
print(g)
with(CarVariables, plot(x=wt, y=mpg))
with(CarVariables, plot(x=cyl,y=carb)
)
with(CarVariables, plot(x=carb,y=mpg))
g <- ggplot(CarVariables, aes(x=carb, y=mpg))
g <- g + geom_point(aes(color=factor(cyl)), size=4, alpha=0.5)
print(g)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point(aes(color=factor(cyl)), size=4, alpha=0.5)
print(g)
g <- ggplot(CarVariables, aes(x=disp, y=mpg))
g <- g + geom_point(aes(color=factor(carb)), size=4, alpha=0.5)
print(g)
with(CarVariables, plot(x=hp, y=mpg))
with(CarVariables, plot(x=hp, y=disp))
g <- ggplot(CarVariables, aes(x=am, y=mpg))
g <- g + geom_point(aes(color=factor(cyl)), size=4, alpha=0.5)
print(g)
fit <- lm(mpg ~ ., data=CarVariables)
summary(fit)
fit <- lm(mpg ~ factor(am) + disp, cyl, wt, data=CarVariables)
fit <- lm(mpg ~ factor(am) + disp+ cyl + wt, data=CarVariables)
fit <- lm(mpg ~ factor(am) + disp, cyl, wt, data=CarVariables)
fit <- lm(mpg ~ factor(am) + disp+ cyl + wt, data=CarVariables)
summary(fit)
install.packages("leaflet")
?addMarkers
?leaflet
??addMarkers
load(url("https://dl.dropboxusercontent.com/u/36380459/titanicRFmodel.RData"))
newData <- data.frame(Age=30, Pclass=1, Fare=100, Sex = "female")
result <- predict(rf, newData)
result[1]
if (result == "1") {"Yes"}  else {"No "}
newData <- data.frame(Age=30, Pclass=3, Fare=100, Sex = "female")
result <- predict(rf, newData)
result[1]
if (result == "1") {"Yes"}  else {"No "}
newData <- data.frame(Age=30, Pclass=2, Fare=100, Sex = "female")
result <- predict(rf, newData)
result[1]
if (result == "1") {"Yes"}  else {"No "}
newData <- data.frame(Age=30, Pclass=2, Fare=100, Sex = "female")
result <- predict(rf, newData)
result
if (result == "1") {"Yes"}  else {"No "}
shiny::runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
?min
mean
?mean
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
head(titanicdata)
min(titanicdata[titanicdata$Pclass=="1",titanicdata$Fare], na.rm = TRUE)
min(,titanicdata$Fare], na.rm = TRUE)
min(titanicdata$Fare, na.rm = TRUE)
titanicdata[titanicdata$Pclass=="1",]
titanicdata[titanicdata$Pclass=="1",titanicdata$Fare]
titanicdata[titanicdata$Pclass=="1",Fare]
titanicdata[titanicdata$Pclass=="1",titanicdata$Fare]
titanicdata[titanicdata$Pclass=="1" && titanicdata$Fare > 0,]
titanicdata[titanicdata$Pclass=="1",Fare]
titanicdata[titanicdata$Pclass=="1",]
summary(titanicdata[titanicdata$Pclass=="1",])
titanicdata[titanicdata$Pclass=="1",]
titanicdata[,titanicdata$Pclass]
titanicdata[,titanicdata$Fare]
titanicdata[,titanicdata$Sex]
titanicdata
head(titanincdata)
head(titanicdata)
library(dplyr)
select(filter(titanicdata,Pclass=="1"), Fare)
min(select(filter(titanicdata,Pclass=="1"), Fare))
min(select(filter(titanicdata,Pclass=="1", Fare >0), Fare))
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
runApp('R/Cousera/Assignment9_shinyApp')
?img
runApp('R/Cousera/Assignment9_shinyApp')
B <-  matrix(c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
B
A <- matrix(c(3,2,4,16), nrow=2, ncol=2)
A
A * A
A %*% A
solve(A)
solve(A) %*% A
u <- c(3,-5,4)
u
t(u)
v <- c(1,2,5)
v
t(u) * v
t(u) %*% v
u <- c(-3,4,3)
v <- c(3,1,5)
t(u) %*% v
rxOptions()
qplot(circ$x, circ$y, geom = "path")
circ <- get_circle_coords(length.out = 200)
library(ggplot2)
library(tidyverse)
library(scales)
library(stringr)
install.packages("tidyverse")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
source('~/.active-rstudio-document')
source('~/R/circle_creating_with_annotations.R')
get_circle_coords(100)
qplot(circ$x, circ$y, geom = "path")
coords_pi <- get_circle_coords(by = pi / 6) %>% head(-1)
ggplot(coords_pi, aes(x = x, y = y)) +
geom_path(data = circ, color = "grey50") +
geom_point(color = "grey50") +
geom_segment(aes(xend = 0, yend = 0), color = "grey50") +
xlim(-1.2, 1.2) +
ylim(-1.2, 1.2) +
theme_void() +
coord_equal()
coords_pi$angle <- seq(0, 330, 30) %>% paste(" * degree")
coords_pi$pi <- c(
"0", "frac(pi, 6)", "frac(pi, 3)", "frac(pi, 2)",
"frac(2 * pi, 3)", "frac(5 * pi, 6)", "pi",
"frac(7 * pi, 6)", "frac(4 * pi, 3)", "frac(3 * pi, 2)",
"frac(5 * pi, 3)", "frac(11 * pi, 6)"
)
coords_pi$trig <- c(
"1*','* 0",
"frac(sqrt(3), 2) *','* ~ frac(1,2)",
"frac(1, 2) *','* ~ frac(sqrt(3), 2)",
"0*','* 1",
"-frac(1, 2) *','* ~ frac(sqrt(3), 2)",
"-frac(sqrt(3), 2) *','* ~ frac(1,2)",
"-1*','* 0",
"-frac(sqrt(3), 2) *','* ~ -frac(1,2)",
"-frac(1, 2) *','* ~ -frac(sqrt(3), 2)",
"0*','* -1",
"frac(1, 2) *','* ~ -frac(sqrt(3), 2)",
"frac(sqrt(3), 2) *','* ~ -frac(1,2)"
)
bgroup_ <- function(x) {
sprintf("bgroup('(', %s, ')')", x)
}
coords_pi$trig <- bgroup_(coords_pi$trig)
geom_l <- partial(geom_label, size = 2.5,
label.size = NA, parse = TRUE,
color = "firebrick")
ggplot(coords_pi, aes(x = x, y = y)) +
geom_path(data = circ, color = "grey50") +
geom_point(color = "grey50") +
geom_segment(aes(xend = 0, yend = 0), color = "grey50") +
geom_l(aes(label = angle, x = x / 2, y = y / 2)) +
geom_l(aes(label = pi, x = x * 4/5, y = y * 4/5)) +
geom_l(aes(label = trig), fill = NA,
vjust = "outward", hjust = "outward") +
xlim(-1.2, 1.2) +
ylim(-1.2, 1.2) +
theme_void() +
coord_equal()
setwd("./GitHub/kaggleStuff/HousePrices")
library(data.table)
# Loading data
train_csv <- "./data/train.csv"
test_csv <- "./data/test.csv"
result_csv <- "./data/myResult.csv"
train_data <- read.csv(train_csv)
test_data <- read.csv(test_csv)
train_data <- data.table(train_data)
test_data <- data.table(test_data)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond)]
test_data_subset <- test_data[, .(Id, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond)]
dim(test_data_subset)
library(caret)
modelFit <- train(SalePrice~.,data=train_data_subset,method="lm")
modelFit$finalModel
prediction <- predict(modelFit,newData=test_data_subset)
length(prediction)
result <- cbind(1461:(1460 + length(prediction)),prediction)
colnames(result) <- c("Id","SalePrice")
head(result)
predictions <- predict(modelFit,newData=test_data_subset)
length(predictions)
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
result <- cbind(1461:(1460 + length(prediction)),predictions)
colnames(result) <- c("Id","SalePrice")
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
dim(result)
result <- cbind(1461:(1460 + length(predictions)),predictions)
colnames(result) <- c("Id","SalePrice")
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
dim(result)
modelFit$finalModel
modelFit
