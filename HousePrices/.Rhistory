preData
preData <- data.frame(CaseName=c("a","b","c","d"), TotalIntench2=c(23.00, 50.00, 57.00,"N/A"), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,"N/A", "N/A",2), VarIntenCh4= c("N/A",100,100,100)
)
preData
str(preData)
preData <- data.frame(CaseName=c("a","b","c","d"), TotalIntench2=c(23.00, 50.00, 57.00,NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,"N/A", "N/A",2), VarIntenCh4= c("N/A",100,100,100))
preData
str(preData)
preData <- data.frame(CaseName=c("a","b","c","d"), TotalIntench2=c(23.00, 50.00, 57.00,NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA, NA,2), VarIntenCh4= c(NA,100,100,100))
str(preData)
preData
head(training)
preData <- data.frame(CaseName=c("a","b","c","d"), TotalIntenCh2=c(23000, 50000, 57000,NA), FiberWidthCh1=c(10,10,8,8), PerimStatusCh1=c(2,NA, NA,2), VarIntenCh4= c(NA,100,100,100))
preData
?predict
?predict
predict(modFit,preData)
print(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
head(olive)
str(olive)
olive <- olive[,-1]
head(olive)
modFit <- train(Area~.,method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata = newdata)
head(newdata)
print(modFit$finalModel)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
head(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values) / length(values)}
?SAheart
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F)
trainSA <- SAheart[train, c(2,3,6,,7,8,9)]
trainSA <- SAheart[train, c(2,3,6,7,8,9)]
head(trainSA)
trainSA <- SAheart[train, c(2,3,6,7,8,9,10)]
head(trainSA)
trainSA <- SAheart[train, c(2,3,6,7,8,9,10)]
testSA <- SAheart[-train, c(2,3,6,7,8,9,10)]
?train
getModelInfo()
getModelInfo("glm")
?glm
set.seed(13234)
modFit <- glm(chd~., family="binomial",data=trainSA)
summary(modFit)
modFit$pred
modFit$fitted.values
missClass(trainSA$chd,modFit$fitted.values)
predict(modFit,testSA)
missClass(testSA$chd,predict(modFit,testSA))
missClass(trainSA$chd,predict(modFit,trainSA))
set.seed(8484)
train <- sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F)
trainSA <- SAheart[train, c(2,3,6,7,8,9,10)]
testSA <- SAheart[-train, c(2,3,6,7,8,9,10)]
set.seed(13234)
modFit <- glm(chd~., family="binomial",data=trainSA)
missClass(trainSA$chd,modFit$fitted.values)
missClass(trainSA$chd,predict(modFit,trainSA))
missClass(testSA$chd,predict(modFit,testSA))
missClass(trainSA$chd,modFit$fit)
predict(modFit,trainSA)
modFit$fit
install.packages("shiny")
shiny::runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
?renderImage
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
?median
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
library(dplyr)
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
as.integer(min(select(filter(titanicdata,Pclass==1, Fare >0), Fare)))
as.integer(max(select(filter(titanicdata,Pclass==1, Fare >0), Fare)))
as.integer(mean(select(filter(titanicdata,Pclass==1, Fare >0), Fare)))
mean(select(filter(titanicdata,Pclass==1, Fare >0), Fare))
select(filter(titanicdata,Pclass==1, Fare >0), Fare)
?max
max
titanicdata$Survived <- switch(titanicdata$Survived, 0 = "No", 1 = "Yes")
titanicdata$Survived <- if(titanicdata$Survived = 1 {"Yes"} else {"No"}
titanicdata$Survived <- if(titanicdata$Survived == 1 {"Yes"} else {"No"}
titanicdata$Survived <- if(titanicdata$Survived == 1) {"Yes"} else {"No"}
head(titanicdata)
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
titanicdata$Survived <- if(titanicdata$Survived == 1) {"Yes"} else {"No"}
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
head(titanicdata)
titanicdata$Survived <- switch(titanicdata$Survived, 0 == "No", 1 == "Yes")
head(titanicdata)
titanicdata$Survived <- switch(titanicdata$Survived, 0 == "No", 1 == "Yes")
head(titanicdata)
titanicdata$Survived <- if(titanicdata$Survived == 1) {"Yes"} else {"No"}
head(titanicdata)
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
titanicdata$Survived <- if(titanicdata$Survived == TRUE) {"Yes"} else {"No"}
head(titanicdata)
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
titanicdata$Survived <- if(titanicdata$Survived == "1") {"Yes"} else {"No"}
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
head(titanicdata)
summary(titanicdata)
titanicdata$Survived <- if(titanicdata$Survived > 0) {"Yes"} else {"No"}
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
titanicdata$Survived <- if(titanicdata$Survived > 0) "Yes" else "No"
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
titanicdata$Survived <- (if(titanicdata$Survived > 0) "Yes" else "No")
titanicdata <- read.csv(url("https://dl.dropboxusercontent.com/u/36380459/titanic_survival_data.csv"), stringsAsFactors=TRUE)
titanicdata$Survived <- as.factor(titanicdata$Survived)
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages(c("packrat", "rsconnect"))
install.packages("packrat")
head(titanicdata)
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
runApp('//rm2ms000587/U_grundc$/My Documents/GitHub/CourseraAssignment9')
?lm
set.seed(20)
#Predictor (q). Use seq for generating equally spaced sequences fast
q <- seq(from=0, to=20, by=0.1)
#Value to predict (y):
y <- 500 + 0.4 * (q-10)^3
# Some noise is generated and added to the real signal (y):
noise <- rnorm(length(q), mean=10, sd=80)
noisy.y <- y + noise
# Plot of the noisy signal:
plot(q,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
lines(q,y,col='firebrick1',lwd=3)
model <- lm(noisy.y ~ poly(q,3))
model
plot(q,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
lines(q,y,col='firebrick1',lwd=3)
lines(model)
plot(q,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
lines(model)
modelFit <- lm(noisy.y ~ poly(q,3))
modelFit
lines(modelFit)
# Example
set.seed(20)
#Predictor (q). Use seq for generating equally spaced sequences fast
x <- seq(from=0, to=20, by=0.1)
#Value to predict (y):
y <- 500 + 0.4 * (x-10)^3
# Some noise is generated and added to the real signal (y):
noise <- rnorm(length(x), mean=10, sd=80)
noisy.y <- y + noise
# Plot of the noisy signal:
plot(x,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
lines(x,y,col='firebrick1',lwd=3)
modelFit <- lm(noisy.y ~ poly(x,3))
modelFit
plot(x,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
lines(modelFit)
modelFitLine <- lm(noisy.y ~ x)
modelFitPoly <- lm(noisy.y ~ poly(x,3))
lines(modelFitLine)
modelFitLine <- lm(y=noisy.y ~ x)
modelFitPoly
?lines
?predict
predict(modelFitPoly, x)
predict(x, modelFitPoly)
modelFitPoly <- lm(noisy.y ~ poly(x,3))
modelFitLine <- lm(noisy.y ~ x)
predict(modelFitLine,x)
newY <- predict(modelFitLine,x)
modelFitLine
library(caret)
newY <- predict(modelFitLine,x)
fitted(modelFitLine)
plot(x,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
line(x, fitted(modelFitLine), col='blue',lwd=3)
line(x, y=fitted(modelFitLine))
line(x, y=fitted(modelFitLine))
x
fitted(modelFitLine)
c(fitted(modelFitLine))
x
yFit <- fitted(modelFitLine)
class(yFit)
class(x)
yFit
as.vector(yFit)
yFit <- as.vector(fitted(modelFitLine))
plot(x,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
yFit <- as.vector(fitted(modelFitLine))
yFit <- as.vector(fitted(modelFitLine))
line(x, yFit)
line(x, y=yFit)
yFit
lines(x, y=yFit)
plot(x,noisy.y,col='deepskyblue4',xlab='q',main='Observed data')
lines(x, fitted(modelFitLine))
lines(x, fitted(modelFitLine), col="blue", lwd=3)
lines(x, fitted(modelFitPoly), col="green", lwd=3)
lines(x,y,col='firebrick1',lwd=3)
x <- c(1,2,3,4,5,6)
y <- c(1,2,5,7,17,30)
plot(x,y)
plot(x, log(Y))
plot(x, log(y))
x <- c(1,2,3,4,5,6)
y <- c(1,2,5,7,17,30)
plot(x,y)
plot(x, log(y))
model <- lm(log(y)~x)
model
log(y)
?log
plot(x, log10(y))
model <- lm(log10(y)~x)
model
log10(y)
library(tm)
?DocumentTermMatrix
data("crude")
crude
tdm <- TermDocumentMatrix(crude,
control = list(removePunctuation = TRUE,
stopwords = TRUE))
dtm <- DocumentTermMatrix(crude,
control = list(weighting =
function(x)
weightTfIdf(x, normalize =
FALSE),
stopwords = TRUE))
inspect(tdm[202:205, 1:5])
inspect(tdm[c("price", "texas"), c("127", "144", "191", "194")])
inspect(dtm[1:5, 273:276])
inspect(tdm[202:205, 1:5])
inspect(dtm[1:5, 273:276])
dtm <- DocumentTermMatrix(crude,
control = list(list(removePunctuation = TRUE,
stopwords = TRUE)))
inspect(dtm[1:5, 273:276])
termFreq(crude[[14]])
termFreq(crude)
?inspect
class(inspect(tdm[202:205, 1:5]))
history <- "going"
histDF <- data.frame(text = history, stringsAsFactors = F)
histDF <- histDF %>% separate(text, c("word1", "word2", "word3"), sep=" ", fill="left")
histDF
history <- "going"
histDF <- data.frame(text = history, stringsAsFactors = F)
histDF <- histDF %>% separate(text, c("word1", "word2", "word3"), sep=" ", fill="left")
histDF
history <- "going"
histDF <- data.frame(text = history, stringsAsFactors = F)
histDF <- histDF %>% separate(text, c("word1", "word2", "word3"), sep=" ", fill="left")
histDF
library(tidytext)
library(dplyr)
library(stringi)
library(tidyr)
c(1:100)
character(c(1:100))
numbers <- charachter()
numbers <- character()
head(numbers)
numbers <- c(1:100)
head(numbers)
str(numbers)
as.character(c(1:100))
substring(as.character(c(1:100)), start=1,stop=1)
subst(as.character(c(1:100)), start=1,stop=1)
substr(as.character(c(1:100)), start=1,stop=1)
library(dplyr)
data.frame(numbers= substr(as.character(c(1:100)), start=1,stop=1)) %>% count(numbers)
data.frame(numbers= substr(as.character(c(1:1000)), start=1,stop=1)) %>% count(numbers)
data.frame(numbers= substr(as.character(c(1:10)), start=1,stop=1)) %>% count(numbers)
data.frame(numbers= substr(as.character(c(1:20)), start=1,stop=1)) %>% count(numbers)
data.frame(numbers= substr(as.character(c(1:30)), start=1,stop=1)) %>% count(numbers)
data.frame(numbers= substr(as.character(c(1:100)), start=1,stop=1)) %>% count(numbers)
data.frame(numbers= substr(as.character(c(1:200)), start=1,stop=1)) %>% count(numbers)
data.frame(numbers= substr(as.character(c(1:1000)), start=1,stop=1)) %>% count(numbers)
x<- c(1,2,3,NA)
x
DataDistribution<-c(BiggerZero=sum(x>0, na.rm = TRUE), EqualZero=sum(x==0, na.rm = TRUE), SmallerZero=sum(x<0, na.rm = TRUE), Na=sum(is.na(x)))
DataDistribution
getwd(9)
getwd()
library(readxl)
library(dplyr)
library(knitr)
library(stringr)
library(magrittr)
input <- read_excel("kleinerTest.xlsx")
colTypes = lapply(input, class)
descri <- function(cl){
c = input[,cl] %>% unlist
colType = colTypes[cl][[1]][1]
missVal <- table(is.na(c))[2]
if (colType == "character"){
ga<-data.frame(
Column=cl,
type="character",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(NA),
Numbers_Grt_0=as.numeric(NA),
Numbers_Sm_0=as.numeric(NA),
min=as.character(NA),
Q1=as.character(NA),
median=as.character(NA),
mean=as.character(NA),
Q3=as.character(NA),
max=as.character(NA)
)
return(ga)
}
else if (colType == "factor") {
ga<-data.frame(
Column=cl,
type="factor",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(NA),
Numbers_Grt_0=as.numeric(NA),
Numbers_Sm_0=as.numeric(NA),
min=as.character(NA),
Q1=as.character(NA),
median=as.character(NA),
mean=as.character(NA),
Q3=as.character(NA),
max=as.character(NA)
)
return(ga)
}
else if (colType == "logical"){
ga<-data.frame(
Column=cl,
type="logical",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(NA),
Numbers_Grt_0=as.numeric(NA),
Numbers_Sm_0=as.numeric(NA),
min=as.character(NA),
Q1=as.character(NA),
median=as.character(NA),
mean=as.character(NA),
Q3=as.character(NA),
max=as.character(NA)
)
return(ga)
}
else if (colType == "numeric"){
DataDistribution<-c(BiggerZero=sum(c>0, na.rm = TRUE), EqualZero=sum(c==0, na.rm = TRUE), SmallerZero=sum(c<0, na.rm = TRUE), Na=sum(is.na(c)))
ga<-data.frame(Column=cl,
type="numeric",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(DataDistribution['EqualZero']),
Numbers_Grt_0=as.numeric(DataDistribution['BiggerZero']),
Numbers_Sm_0=as.numeric(DataDistribution['SmallerZero']),
min=as.character(min(c, na.rm=TRUE)),
Q1=as.character(quantile(c, na.rm=TRUE)[2]),
median=as.character(median(c, na.rm=TRUE)),
mean=as.character(round(mean(c, na.rm=TRUE),2)),
Q3=as.character(quantile(c, na.rm=TRUE)[4]),
max=as.character(max(c, na.rm=TRUE))
)
return(ga)
}
else if (colType == "integer"){
DataDistribution<-c(BiggerZero=sum(c>0, na.rm = TRUE), EqualZero=sum(c==0, na.rm = TRUE), SmallerZero=sum(c<0, na.rm = TRUE), Na=sum(is.na(c)))
ga<-data.frame(Column=cl,
type="integer",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(DataDistribution['EqualZero']),
Numbers_Grt_0=as.numeric(DataDistribution['BiggerZero']),
Numbers_Sm_0=as.numeric(DataDistribution['SmallerZero']),
min=as.character(min(c, na.rm=TRUE)),
Q1=as.character(quantile(c, na.rm=TRUE)[2]),
median=as.character(median(c, na.rm=TRUE)),
mean=as.character(round(mean(c, na.rm=TRUE),2)),
Q3=as.character(quantile(c, na.rm=TRUE)[4]),
max=as.character(max(c, na.rm=TRUE))
)
return(ga)
}
else if (colType == "POSIXct"){
ga<-data.frame(Column=cl,
type="date",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(NA),
Numbers_Grt_0=as.numeric(NA),
Numbers_Sm_0=as.numeric(NA),
min=as.character(min(c, na.rm=TRUE)),
Q1=as.character(quantile(c, na.rm=TRUE)[[2]]),
median=as.character(median(c, na.rm=TRUE)),
mean=as.character(mean(c, na.rm=TRUE)),
Q3=as.character(quantile(c, na.rm=TRUE)[[4]]),
max=as.character(max(c, na.rm=TRUE)))
return(ga)
}
else {
return(class(c))
}
}
storeResults <- data.frame()
for(colname in colnames(input)) {
#print(colname)
dat <- descri(colname)  # note: descri(column-data,column-name)
#print(dat)
storeResults <- rbind(storeResults, dat)
}
kable(storeResults)
input <- read_excel("kleinerTest.xlsx")
install.packages("readxl")
library(readxl)
library(RODBC)
?sqlFetch
# read data via ODBC source
library(RODBC)
#setwd("./Projects/PricingTool")
dnsName <- "PricingToolProd"
PPTConnect <- odbcConnect(dnsName)
sqlQuery <- "select Parameter, AffiliateCountry, ContractStartDate, ComparablePrice, ContractDuration, SettlementModel, ContractedQuantityReportable
from [Reporting].[vfAssayPricingLine] apl
inner join [Reporting].[vdProduct] prod
on apl.MaterialNumber = prod.MaterialNumber
where Parameter = 'TSH (IM)' and apl.SalesOrganization = '4765'"
paramter_price_table <- sqlQuery(PPTConnect,sqlQuery, stringsAsFactors=F)
head(paramter_price_table)
write.table(paramter_price_table,"parameter_price.csv",sep=",", row.names=F)
close(PPTConnect)
getwd()
?svm
install.packages("e1071")
for (x in seq(5,20,5)) {print(x)}
for (x in seq(5,23,5)) {print(x)}
sqrt(4)
getwd()
setwd("./GitHub/kaggleStuff/HousePrices")
library(data.table)
# Loading data
train_csv <- "./data/train.csv"
test_csv <- "./data/test.csv"
result_csv <- "./data/myResult.csv"
train_data <- read.csv(train_csv)
test_data <- read.csv(test_csv)
train_data <- data.table(train_data)
test_data <- data.table(test_data)
X <- as.matrix(train_data[, .(bias = 1,HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond)])
y <- as.matrix(train_data[,SalePrice])
solve(t(X) %*% X) %*% t(X) %*% y
theta <- solve(t(X) %*% X) %*% t(X) %*% y
X %*% theta
?random
rbinom(1,1, prob=0.7)
rbinom(1,1, prob=0.7)
rbinom(1,1, prob=0.7)
rbinom(1,1, prob=0.7)
rbinom(1,1, prob=0.7)
rbinom(1,1, prob=0.7)
rbinom(1,1, prob=0.7)
?sample
sample(c(1,0),10,prob=c(0.7,0.3))
sample(c(1,0),10,replace=TRUE,prob=c(0.7,0.3))
sample(c(1,0),10,replace=TRUE,prob=c(0.7,0.3))
sample(c(1,0),10,replace=TRUE,prob=c(0.7,0.3))
sample(c(1,0),10,replace=TRUE,prob=c(0.7,0.3))
test <- c(1,2,3,4,5,6,7,8,9,10)
test
sampling <- sample(c(1,0), 10, replace=TRUE,prob=c(0.7,0.3))
sampling
test[sampling == 1]
test[sampling == 0]
dim(test)
