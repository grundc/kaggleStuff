Q3=as.character(NA),
max=as.character(NA)
)
return(ga)
}
else if (colType == "numeric"){
DataDistribution<-c(BiggerZero=sum(c>0, na.rm = TRUE), EqualZero=sum(c==0, na.rm = TRUE), SmallerZero=sum(c<0, na.rm = TRUE), Na=sum(is.na(c)))
ga<-data.frame(Column=cl,
type="numeric",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(DataDistribution['EqualZero']),
Numbers_Grt_0=as.numeric(DataDistribution['BiggerZero']),
Numbers_Sm_0=as.numeric(DataDistribution['SmallerZero']),
min=as.character(min(c, na.rm=TRUE)),
Q1=as.character(quantile(c, na.rm=TRUE)[2]),
median=as.character(median(c, na.rm=TRUE)),
mean=as.character(round(mean(c, na.rm=TRUE),2)),
Q3=as.character(quantile(c, na.rm=TRUE)[4]),
max=as.character(max(c, na.rm=TRUE))
)
return(ga)
}
else if (colType == "integer"){
DataDistribution<-c(BiggerZero=sum(c>0, na.rm = TRUE), EqualZero=sum(c==0, na.rm = TRUE), SmallerZero=sum(c<0, na.rm = TRUE), Na=sum(is.na(c)))
ga<-data.frame(Column=cl,
type="integer",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(DataDistribution['EqualZero']),
Numbers_Grt_0=as.numeric(DataDistribution['BiggerZero']),
Numbers_Sm_0=as.numeric(DataDistribution['SmallerZero']),
min=as.character(min(c, na.rm=TRUE)),
Q1=as.character(quantile(c, na.rm=TRUE)[2]),
median=as.character(median(c, na.rm=TRUE)),
mean=as.character(round(mean(c, na.rm=TRUE),2)),
Q3=as.character(quantile(c, na.rm=TRUE)[4]),
max=as.character(max(c, na.rm=TRUE))
)
return(ga)
}
else if (colType == "POSIXct"){
ga<-data.frame(Column=cl,
type="date",
total=length(c),
unique=length(unique(c)),
MissNumbers= as.numeric(ifelse(is.na(missVal), 0 , missVal)),
MissNumbers_Fract=as.numeric(ifelse(is.na(missVal), 0 , round(missVal/length(c),2))),
Numbers_Eq_0=as.numeric(NA),
Numbers_Grt_0=as.numeric(NA),
Numbers_Sm_0=as.numeric(NA),
min=as.character(min(c, na.rm=TRUE)),
Q1=as.character(quantile(c, na.rm=TRUE)[[2]]),
median=as.character(median(c, na.rm=TRUE)),
mean=as.character(mean(c, na.rm=TRUE)),
Q3=as.character(quantile(c, na.rm=TRUE)[[4]]),
max=as.character(max(c, na.rm=TRUE)))
return(ga)
}
else {
return(class(c))
}
}
storeResults <- data.frame()
for(colname in colnames(input)) {
#print(colname)
dat <- descri(colname)  # note: descri(column-data,column-name)
#print(dat)
storeResults <- rbind(storeResults, dat)
}
kable(storeResults)
input <- read_excel("kleinerTest.xlsx")
install.packages("readxl")
library(readxl)
library(RODBC)
?sqlFetch
# read data via ODBC source
library(RODBC)
#setwd("./Projects/PricingTool")
dnsName <- "PricingToolProd"
PPTConnect <- odbcConnect(dnsName)
sqlQuery <- "select Parameter, AffiliateCountry, ContractStartDate, ComparablePrice, ContractDuration, SettlementModel, ContractedQuantityReportable
from [Reporting].[vfAssayPricingLine] apl
inner join [Reporting].[vdProduct] prod
on apl.MaterialNumber = prod.MaterialNumber
where Parameter = 'TSH (IM)' and apl.SalesOrganization = '4765'"
paramter_price_table <- sqlQuery(PPTConnect,sqlQuery, stringsAsFactors=F)
head(paramter_price_table)
write.table(paramter_price_table,"parameter_price.csv",sep=",", row.names=F)
close(PPTConnect)
getwd()
?svm
install.packages("e1071")
source('//rm2ms000587/U_grundc$/My Documents/GitHub/kaggleStuff/HousePrices/Learning_Curve.R')
setwd("./GitHub/kaggleStuff/HousePrices")
# Loading data
train_csv <- "./data/train.csv"
test_csv <- "./data/test.csv"
result_csv <- "./data/myResult.csv"
train_data <- read.csv(train_csv)
test_data <- read.csv(test_csv)
train_data <- data.table(train_data)
test_data <- data.table(test_data)
library(data.table)
# Loading data
train_csv <- "./data/train.csv"
test_csv <- "./data/test.csv"
result_csv <- "./data/myResult.csv"
train_data <- read.csv(train_csv)
test_data <- read.csv(test_csv)
train_data <- data.table(train_data)
test_data <- data.table(test_data)
X <- as.matrix(train_data[, .(bias = 1,HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond)])
y <- as.matrix(train_data[,SalePrice])
learning_data <- Learning_curve(X,y,20)
learning_data
test_matrix <- matrix()
test_matrix
rbind(test_matrix, c(1,2,3))
test_matrix <- matrix(nrow=0,ncol = 0)
rbind(test_matrix, c(1,2,3))
test_matrix <- matrix(nrow=0,ncol = 3)
rbind(test_matrix, c(1,2,3))
rbind(test_matrix, c(1,2,3))
test_matrix <- rbind(test_matrix, c(1,2,3))
test_matrix
test_matrix <- rbind(test_matrix, c(1,2,3))
test_matrix
learning_data <- Learning_curve(X,y,20)
learning_data
source('//rm2ms000587/U_grundc$/My Documents/GitHub/kaggleStuff/HousePrices/Learning_Curve.R')
learning_data <- Learning_curve(X,y,20)
learning_data
library(ggplot2)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data
head(learning_data)
learningplot <- ggplot(learning_data, aes(Samples,RMSE)) + geom_line(color=type)
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(Samples,RMSE)) + geom_line(color=type)
learningplot <- ggplot(learning_data, aes(Samples,RMSE)) + geom_line(color=aes(type))
learningplot
learningplot <- ggplot(learning_data, aes(Samples,RMSE)) + geom_line()
learningplot
learningplot <- ggplot(learning_data[type == "train",], aes(Samples,RMSE)) + geom_line()
learningplot
learningplot <- ggplot(learning_data[type == "train",], aes(Samples,RMSE)) + geom_line(aes(Samples,RMSE))
learningplot
learning_data[type == "train"
,]
learningplot <- ggplot(learning_data[type == "train",], aes(Samples,RMSE)) + geom_point(aes(Samples,RMSE))
learningplot
learningplot <- ggplot(learning_data[type == "test",], aes(Samples,RMSE)) + geom_point(aes(Samples,RMSE))
learningplot
learningplot <- ggplot(learning_data, aes(Samples,RMSE), color=type) + geom_point(aes(Samples,RMSE))
learningplot
learningplot <- ggplot(learning_data, aes(Samples,RMSE)) + geom_point(aes(Samples,RMSE),color=type)
learningplot <- ggplot(learning_data, aes(Samples,RMSE)) + geom_point(aes(Samples,RMSE),color=aes(type))
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_line()
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_point()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_point()
learning_data <- Learning_curve(X,y,100)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_point()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_point()
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_line()
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_point() + geom_smooth()
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_point() + geom_smooth(model=lm)
learningplot
learning_data <- Learning_curve(X,y,100)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, colour=type)) + geom_point()
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_point()
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
source('//rm2ms000587/U_grundc$/My Documents/GitHub/kaggleStuff/HousePrices/Learning_Curve.R')
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,20)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learning_data <- Learning_curve(X,y,20)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_line()
learningplot
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,20)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
X <- as.matrix(train_data[, .(bias = 1,HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual)])
y <- as.matrix(train_data[,SalePrice])
X <- as.matrix(train_data[, .(bias = 1,HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual)])
y <- as.matrix(train_data[,SalePrice])
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, MSZoning)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, Neighborhood)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,BsmtQual)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[LotArea <= 50000,.(LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF)]
train_data_subset
plot(train_data_subset)
train_data_subset <- train_data[,.(TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, TotalBsmtSF)]
train_data_subset
plot(train_data_subset)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, BsmtCond)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF,CentralAir)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF, Fireplaces)]
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
summary(lm_houseprice_1)
?lm
lm_houseprice_1 <- lm(SalePrice~., train_data_subset -1) # without intercept
summary(lm_houseprice_1)
lm_houseprice_1 <- lm(SalePrice~. -1, train_data_subset) # without intercept
summary(lm_houseprice_1)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF, Fireplaces)]
test_data_subset <- test_data[, .(Id, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, TotalBsmtSF,Fireplaces)]
library(caret)
modelFit <- train(SalePrice~. -1,data=train_data_subset,method="lm")
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
result <- cbind(1461:(1460 + length(predictions)),predictions)
colnames(result) <- c("Id","SalePrice")
head(result)
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
dim(predictions)
predictions
dim(predictions)
length(predictions)
?train
modelFit <- train(SalePrice~.,data=train_data_subset,method="lm")
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
result <- cbind(1461:(1460 + length(predictions)),predictions)
colnames(result) <- c("Id","SalePrice")
head(result)
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
length(predictions)
dim(train_data_subset)
dim(test_data_subset)
modelFit <- train(SalePrice~. -1,data=train_data_subset,method="lm")
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
result <- cbind(1461:(1460 + length(predictions)),predictions)
colnames(result) <- c("Id","SalePrice")
head(result)
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual)# ,TotalBsmtSF, Fireplaces)]
test_data_subset <- test_data[, .(Id, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, TotalBsmtSF,Fireplaces)]
library(caret)
modelFit <- train(SalePrice~.,data=train_data_subset,method="lm")
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
result <- cbind(1461:(1460 + length(predictions)),predictions)
colnames(result) <- c("Id","SalePrice")
head(result)
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
# Alternative methods
X <- as.matrix(train_data[, .(bias = 1,HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF, Fireplaces)])
y <- as.matrix(train_data[,SalePrice])
# Normal equation   (X(T) * X)^-1 * X(T)*y
solve(t(X) %*% X) %*% t(X) %*% y
# theta <- solve(t(X) %*% X) %*% t(X) %*% y
# Standard function R
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
# lm_houseprice_1 <- lm(SalePrice~. -1, train_data_subset) # without intercept
summary(lm_houseprice_1)
scaled.X <- cbind(X[,1],scale(X[,2:5]))
scaled.X
colMeans(scaled.X)
# Normal equation   (X(T) * X)^-1 * X(T)*y
solve(t(scaled.X) %*% scaled.X) %*% t(scaled.X) %*% y
LinReg_GradientDesc(scaled.X,y,0.001,0,100000,0.0001)
# Working with a learning curve
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual)# ,TotalBsmtSF, Fireplaces)]
test_data_subset <- test_data[, .(Id, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, TotalBsmtSF,Fireplaces)]
library(caret)
modelFit <- train(SalePrice~.,data=train_data_subset,method="lm")
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
result <- cbind(1461:(1460 + length(predictions)),predictions)
colnames(result) <- c("Id","SalePrice")
head(result)
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
# Alternative methods
X <- as.matrix(train_data[, .(bias = 1,HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF, Fireplaces)])
y <- as.matrix(train_data[,SalePrice])
# Normal equation   (X(T) * X)^-1 * X(T)*y
solve(t(X) %*% X) %*% t(X) %*% y
# theta <- solve(t(X) %*% X) %*% t(X) %*% y
# Standard function R
lm_houseprice_1 <- lm(SalePrice~., train_data_subset)
# lm_houseprice_1 <- lm(SalePrice~. -1, train_data_subset) # without intercept
summary(lm_houseprice_1)
scaled.X <- cbind(X[,1],scale(X[,2:5]))
scaled.X
colMeans(scaled.X)
# Normal equation   (X(T) * X)^-1 * X(T)*y
solve(t(scaled.X) %*% scaled.X) %*% t(scaled.X) %*% y
LinReg_GradientDesc(scaled.X,y,0.001,0,100000,0.0001)
# Working with a learning curve
learning_data <- Learning_curve(X,y,50)
colnames(learning_data) <- c("Samples","RMSE", "type")
learning_data <- data.table(learning_data)
head(learning_data)
learningplot <- ggplot(learning_data, aes(x=Samples,y=RMSE, group=type, colour=type)) + geom_smooth()
learningplot
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual)]# ,TotalBsmtSF, Fireplaces)]
library(caret)
modelFit <- train(SalePrice~.,data=train_data_subset,method="lm")
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
modelFit <- lm(SalePrice~. -1, train_data_subset)
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF, Fireplaces)]
test_data_subset <- test_data[, .(Id, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, TotalBsmtSF,Fireplaces)]
modelFit <- lm(SalePrice~. -1, train_data_subset)
modelFit$finalModel
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
train_data_subset <- train_data[, .(SalePrice, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual,TotalBsmtSF, Fireplaces)]
test_data_subset <- test_data[, .(Id, HouseAge = YrSold - YearBuilt, LotArea, TotalHouseSF = GrLivArea+X1stFlrSF+X2ndFlrSF, OverallCond, OverallQual, TotalBsmtSF,Fireplaces)]
modelFit <- lm(SalePrice~. -1, train_data_subset)
summary(modelFit)
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
modelFit <- lm(SalePrice~. -1, train_data_subset)
summary(modelFit)
predictions <- predict(modelFit,newdata=test_data_subset)
length(predictions)
result <- cbind(1461:(1460 + length(predictions)),predictions)
colnames(result) <- c("Id","SalePrice")
head(result)
write.csv(result,file=result_csv, quote=FALSE, row.names = FALSE)
head(predictions)
head(result)
results[is.na(SalePrice),]
result[is.na(SalePrice),]
result[SalePrice > 10000,]
head(result)
result[SalePrice > 10000,]
result[result$SalePrice > 10000,]
class(result)
result <- data.table(result)
head(result)
result[is.na(SalePrice),]
?train
